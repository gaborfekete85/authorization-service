plugins {
	id 'org.springframework.boot' version '2.5.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
    id 'maven-publish'
    id "com.google.cloud.tools.jib" version "3.0.0"
}

group = 'com.example'
version = 'latest'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

apply plugin: 'groovy'


bootRun {
    environment (["GOOGLE_APPLICATION_CREDENTIALS": "c:\\projects\\global-services\\authorization-service\\src\\main\\resources\\instaclone-5eae6-firebase-adminsdk-no4gm-902fdd671d.json" ])
}

dependencies {
	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'junit:junit:4.13.1'

    // DB
	runtimeOnly 'org.postgresql:postgresql'

	// TEST
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
    testImplementation ("org.codehaus.groovy:groovy-all:2.5.2")

	// LIBRARIES
	implementation 'io.jsonwebtoken:jjwt:0.5.1'
	compileOnly 'org.projectlombok:lombok:1.18.20'
	implementation "org.liquibase:liquibase-core"

    // FIREBASE
    implementation 'com.google.firebase:firebase-admin:8.1.0'

}

test {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
    integration {
        groovy.srcDir "$projectDir/src/integration/groovy"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
//    unit {
//        groovy.srcDir "$projectDir/src/test"
//        resources.srcDir "$projectDir/src/test"
//        compileClasspath += main.output + test.output
//        runtimeClasspath += main.output + test.output
//    }

}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

check.dependsOn integrationTest

test {
    useJUnitPlatform()
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

jib {
    from {
        image = "openjdk:11-slim"
    }
    to {
        image = findProperty('DOCKER_REPOSITORY')+"/authorization-service"
        tags = [getGitHash()]
        auth {
            username = findProperty('DOCKER_USERNAME') ?: dockerHubUserName
            password = findProperty('DOCKER_PASSWORD') ?: dockerHubPassword
        }
    }
    container {
        mainClass = "com.crimelist.crime.AuthorizationApplication"
        jvmFlags = ['-Xdebug']
        ports = ['8302']
        volumes = ['/data']
        environment = [
                'VERSION': version,
                'DATA_DIR': '/data',
                'APPLICATION_PORT' : '8302',
                'DEVELOPMENT_MODE' : 'true'
        ]
    }
}